syntax = "proto3";

package proto;

// Session
message SessionRequest {
    map<string, string> Options = 1;
}

message SessionHandler {
  string sessionId = 1;
  bool Success = 2;
}

message InstanceMetadata {
  string InstanceID = 1;
}

service Session {
  rpc CreateSession (SessionRequest) returns (SessionHandler) {}
  rpc CreateTaskSet (SessionHandler) returns (TaskSetHandler) {}
  rpc CloseSession (SessionHandler) returns (SessionHandler) {}
  rpc GetInstanceID (SessionHandler) returns (InstanceMetadata) {}
}

// Task definitions
message TaskDefinition {
  string Name = 1;
  string CallableBlock = 2;
  map<uint32, string> ArgumentsBlocks = 3;
  map<string, string> KwargsBlocks = 4;
}

message TaskHandler {
  string TaskID = 1;
}

// Result 
message TaskSetHandler {
  string taskSetId = 1;
  bool Success = 2;
}

message TaskSetStatus {
  string TaskSetID = 1;
  string TaskSetStatus = 2;
}

message TaskResult {
  string TaskRunID = 1;
  string ObjectReturnBlock = 2;
  string StdoutBlock = 3;
  string StderrBlock = 4;
  bool Success = 5;
}

message TaskSetResult {
  string TaskSetID = 1;
  bool OverallSuccess = 2;
  repeated TaskResult TaskResults = 3;
}

message TaskAdderResult {
  bool Success = 1;
  string ErrorMesssage = 2;
}
message MapAdder {
  TaskSetHandler taskSetHandler = 1;
  repeated TaskHandler MappersDefinition = 2;
}

message ReduceAdder {
  TaskSetHandler taskSetHandler = 1;
  TaskHandler ReducerDefinition = 2;
  int32 Limit = 3;
}

message TransformAdder {
  TaskSetHandler taskSetHandler = 1;
  TaskHandler TransformerDefinition = 2;
}

message FanoutAdder {
  TaskSetHandler taskSetHandler = 1;
  TaskHandler FanoutDefinition = 2;
  int32 FanoutCount = 3;
}

// While executing a task set, the server will stream back progress reports
// --> OnTaskSetProgress
// --> OnTaskGroupProgress
// --> OnTaskProgress
enum ProgressType {
  TaskSetProgress = 0;
  TaskGroupProgress = 1;
  TaskProgress = 2;
}
message TaskSetProgressReport {
  TaskSetHandler taskSetHandler = 1;
  ProgressType ProgressType = 2;
  string RelatedID = 3;
  string ProgressMessage = 4;
  string StatusMessage = 5;
  map<string, string> ProgressDetails = 6; // This is an arbitrary key-value pair to provide more information
}

enum BlockRetentionPolicy {
  RemoveAll = 0;
  KeepAll = 1;
  KeepLastLayerOutput = 2;
  KeelAllOutput = 3;
}
message SetRetentionPolicy {
  TaskSetHandler taskSetHandler = 1;
  BlockRetentionPolicy RetentionPolicy = 2;
}

service TaskSet {
  rpc DefineTask (TaskDefinition) returns (TaskHandler) {}

  rpc AddMap (MapAdder) returns (TaskAdderResult) {}
  rpc AddReduce (ReduceAdder) returns (TaskAdderResult) {}
  rpc AddTransform (TransformAdder) returns (TaskAdderResult) {}
  rpc AddFanout (FanoutAdder) returns (TaskAdderResult) {}
  rpc Execute (TaskSetHandler) returns (stream TaskSetProgressReport) {}
  rpc SetBlockRetentionPolicy (SetRetentionPolicy) returns (TaskSetHandler) {} // Need to add this to the TaskSet service implementation
  rpc Dismantle (TaskSetHandler) returns (TaskSetHandler) {}

  rpc GetTaskSetResults (TaskSetHandler) returns (TaskSetResult) {}
}

// Block Proxy
message ProxyBlockChunk {
  SessionHandler SessionHandler = 1;
  bytes BlockChunk = 2;
}
message ProxyBlockHandler {
  SessionHandler SessionHandler = 1;
  string BlockID = 2;
}
service BlockProxy {
  rpc GetBlock (ProxyBlockHandler) returns (stream ProxyBlockChunk) {}
  rpc PutBlock (stream ProxyBlockChunk) returns (ProxyBlockHandler) {}
}
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: grpc_node_protocol/nodeprotocol.proto

package grpc_node_protocol

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeController_Callback_FullMethodName = "/proto.NodeController/Callback"
)

// NodeControllerClient is the client API for NodeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeControllerClient interface {
	Callback(ctx context.Context, in *CommandStatus, opts ...grpc.CallOption) (*Ack, error)
}

type nodeControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeControllerClient(cc grpc.ClientConnInterface) NodeControllerClient {
	return &nodeControllerClient{cc}
}

func (c *nodeControllerClient) Callback(ctx context.Context, in *CommandStatus, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, NodeController_Callback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeControllerServer is the server API for NodeController service.
// All implementations must embed UnimplementedNodeControllerServer
// for forward compatibility.
type NodeControllerServer interface {
	Callback(context.Context, *CommandStatus) (*Ack, error)
	mustEmbedUnimplementedNodeControllerServer()
}

// UnimplementedNodeControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeControllerServer struct{}

func (UnimplementedNodeControllerServer) Callback(context.Context, *CommandStatus) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedNodeControllerServer) mustEmbedUnimplementedNodeControllerServer() {}
func (UnimplementedNodeControllerServer) testEmbeddedByValue()                        {}

// UnsafeNodeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeControllerServer will
// result in compilation errors.
type UnsafeNodeControllerServer interface {
	mustEmbedUnimplementedNodeControllerServer()
}

func RegisterNodeControllerServer(s grpc.ServiceRegistrar, srv NodeControllerServer) {
	// If the following call pancis, it indicates UnimplementedNodeControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeController_ServiceDesc, srv)
}

func _NodeController_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControllerServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeController_Callback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControllerServer).Callback(ctx, req.(*CommandStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeController_ServiceDesc is the grpc.ServiceDesc for NodeController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodeController",
	HandlerType: (*NodeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Callback",
			Handler:    _NodeController_Callback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_node_protocol/nodeprotocol.proto",
}

const (
	Node_InstallPackage_FullMethodName     = "/proto.Node/InstallPackage"
	Node_UninstallPackage_FullMethodName   = "/proto.Node/UninstallPackage"
	Node_ListPackages_FullMethodName       = "/proto.Node/ListPackages"
	Node_RegisterCallback_FullMethodName   = "/proto.Node/RegisterCallback"
	Node_UnregisterCallback_FullMethodName = "/proto.Node/UnregisterCallback"
	Node_RegisterCommand_FullMethodName    = "/proto.Node/RegisterCommand"
	Node_RunCommand_FullMethodName         = "/proto.Node/RunCommand"
	Node_KillCommand_FullMethodName        = "/proto.Node/KillCommand"
	Node_GetCommandOutput_FullMethodName   = "/proto.Node/GetCommandOutput"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	// Packages / Setup
	InstallPackage(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageResponse, error)
	UninstallPackage(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageResponse, error)
	ListPackages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PackageList, error)
	RegisterCallback(ctx context.Context, in *CallbackRegistration, opts ...grpc.CallOption) (*CallbackHandler, error)
	UnregisterCallback(ctx context.Context, in *CallbackHandler, opts ...grpc.CallOption) (*Ack, error)
	// Commands
	RegisterCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CommandRequestChunk, CommandHandler], error)
	RunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandRequestResponse, error)
	KillCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandRequestResponse, error)
	GetCommandOutput(ctx context.Context, in *CommandHandler, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CommandOutputChunk], error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) InstallPackage(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageResponse)
	err := c.cc.Invoke(ctx, Node_InstallPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UninstallPackage(ctx context.Context, in *PackageRequest, opts ...grpc.CallOption) (*PackageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageResponse)
	err := c.cc.Invoke(ctx, Node_UninstallPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListPackages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PackageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageList)
	err := c.cc.Invoke(ctx, Node_ListPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RegisterCallback(ctx context.Context, in *CallbackRegistration, opts ...grpc.CallOption) (*CallbackHandler, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallbackHandler)
	err := c.cc.Invoke(ctx, Node_RegisterCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UnregisterCallback(ctx context.Context, in *CallbackHandler, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Node_UnregisterCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RegisterCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CommandRequestChunk, CommandHandler], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[0], Node_RegisterCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommandRequestChunk, CommandHandler]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Node_RegisterCommandClient = grpc.ClientStreamingClient[CommandRequestChunk, CommandHandler]

func (c *nodeClient) RunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandRequestResponse)
	err := c.cc.Invoke(ctx, Node_RunCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) KillCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandRequestResponse)
	err := c.cc.Invoke(ctx, Node_KillCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetCommandOutput(ctx context.Context, in *CommandHandler, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CommandOutputChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[1], Node_GetCommandOutput_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommandHandler, CommandOutputChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Node_GetCommandOutputClient = grpc.ServerStreamingClient[CommandOutputChunk]

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility.
type NodeServer interface {
	// Packages / Setup
	InstallPackage(context.Context, *PackageRequest) (*PackageResponse, error)
	UninstallPackage(context.Context, *PackageRequest) (*PackageResponse, error)
	ListPackages(context.Context, *empty.Empty) (*PackageList, error)
	RegisterCallback(context.Context, *CallbackRegistration) (*CallbackHandler, error)
	UnregisterCallback(context.Context, *CallbackHandler) (*Ack, error)
	// Commands
	RegisterCommand(grpc.ClientStreamingServer[CommandRequestChunk, CommandHandler]) error
	RunCommand(context.Context, *CommandRequest) (*CommandRequestResponse, error)
	KillCommand(context.Context, *CommandRequest) (*CommandRequestResponse, error)
	GetCommandOutput(*CommandHandler, grpc.ServerStreamingServer[CommandOutputChunk]) error
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServer struct{}

func (UnimplementedNodeServer) InstallPackage(context.Context, *PackageRequest) (*PackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallPackage not implemented")
}
func (UnimplementedNodeServer) UninstallPackage(context.Context, *PackageRequest) (*PackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallPackage not implemented")
}
func (UnimplementedNodeServer) ListPackages(context.Context, *empty.Empty) (*PackageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedNodeServer) RegisterCallback(context.Context, *CallbackRegistration) (*CallbackHandler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCallback not implemented")
}
func (UnimplementedNodeServer) UnregisterCallback(context.Context, *CallbackHandler) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterCallback not implemented")
}
func (UnimplementedNodeServer) RegisterCommand(grpc.ClientStreamingServer[CommandRequestChunk, CommandHandler]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterCommand not implemented")
}
func (UnimplementedNodeServer) RunCommand(context.Context, *CommandRequest) (*CommandRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}
func (UnimplementedNodeServer) KillCommand(context.Context, *CommandRequest) (*CommandRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillCommand not implemented")
}
func (UnimplementedNodeServer) GetCommandOutput(*CommandHandler, grpc.ServerStreamingServer[CommandOutputChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetCommandOutput not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}
func (UnimplementedNodeServer) testEmbeddedByValue()              {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	// If the following call pancis, it indicates UnimplementedNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_InstallPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).InstallPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_InstallPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).InstallPackage(ctx, req.(*PackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UninstallPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UninstallPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_UninstallPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UninstallPackage(ctx, req.(*PackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListPackages(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RegisterCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RegisterCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_RegisterCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RegisterCallback(ctx, req.(*CallbackRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UnregisterCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UnregisterCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_UnregisterCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UnregisterCallback(ctx, req.(*CallbackHandler))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RegisterCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).RegisterCommand(&grpc.GenericServerStream[CommandRequestChunk, CommandHandler]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Node_RegisterCommandServer = grpc.ClientStreamingServer[CommandRequestChunk, CommandHandler]

func _Node_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_RunCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RunCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_KillCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).KillCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_KillCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).KillCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetCommandOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandHandler)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).GetCommandOutput(m, &grpc.GenericServerStream[CommandHandler, CommandOutputChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Node_GetCommandOutputServer = grpc.ServerStreamingServer[CommandOutputChunk]

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallPackage",
			Handler:    _Node_InstallPackage_Handler,
		},
		{
			MethodName: "UninstallPackage",
			Handler:    _Node_UninstallPackage_Handler,
		},
		{
			MethodName: "ListPackages",
			Handler:    _Node_ListPackages_Handler,
		},
		{
			MethodName: "RegisterCallback",
			Handler:    _Node_RegisterCallback_Handler,
		},
		{
			MethodName: "UnregisterCallback",
			Handler:    _Node_UnregisterCallback_Handler,
		},
		{
			MethodName: "RunCommand",
			Handler:    _Node_RunCommand_Handler,
		},
		{
			MethodName: "KillCommand",
			Handler:    _Node_KillCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterCommand",
			Handler:       _Node_RegisterCommand_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCommandOutput",
			Handler:       _Node_GetCommandOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_node_protocol/nodeprotocol.proto",
}

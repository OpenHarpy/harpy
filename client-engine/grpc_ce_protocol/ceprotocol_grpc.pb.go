// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: grpc_ce_protocol/ceprotocol.proto

package grpc_ce_protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Session_CreateSession_FullMethodName = "/proto.Session/CreateSession"
	Session_CreateTaskSet_FullMethodName = "/proto.Session/CreateTaskSet"
	Session_CloseSession_FullMethodName  = "/proto.Session/CloseSession"
	Session_GetInstanceID_FullMethodName = "/proto.Session/GetInstanceID"
)

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionClient interface {
	CreateSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionHandler, error)
	CreateTaskSet(ctx context.Context, in *SessionHandler, opts ...grpc.CallOption) (*TaskSetHandler, error)
	CloseSession(ctx context.Context, in *SessionHandler, opts ...grpc.CallOption) (*SessionHandler, error)
	GetInstanceID(ctx context.Context, in *SessionHandler, opts ...grpc.CallOption) (*InstanceMetadata, error)
}

type sessionClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionClient(cc grpc.ClientConnInterface) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) CreateSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionHandler, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionHandler)
	err := c.cc.Invoke(ctx, Session_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) CreateTaskSet(ctx context.Context, in *SessionHandler, opts ...grpc.CallOption) (*TaskSetHandler, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskSetHandler)
	err := c.cc.Invoke(ctx, Session_CreateTaskSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) CloseSession(ctx context.Context, in *SessionHandler, opts ...grpc.CallOption) (*SessionHandler, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionHandler)
	err := c.cc.Invoke(ctx, Session_CloseSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) GetInstanceID(ctx context.Context, in *SessionHandler, opts ...grpc.CallOption) (*InstanceMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstanceMetadata)
	err := c.cc.Invoke(ctx, Session_GetInstanceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServer is the server API for Session service.
// All implementations must embed UnimplementedSessionServer
// for forward compatibility.
type SessionServer interface {
	CreateSession(context.Context, *SessionRequest) (*SessionHandler, error)
	CreateTaskSet(context.Context, *SessionHandler) (*TaskSetHandler, error)
	CloseSession(context.Context, *SessionHandler) (*SessionHandler, error)
	GetInstanceID(context.Context, *SessionHandler) (*InstanceMetadata, error)
	mustEmbedUnimplementedSessionServer()
}

// UnimplementedSessionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSessionServer struct{}

func (UnimplementedSessionServer) CreateSession(context.Context, *SessionRequest) (*SessionHandler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSessionServer) CreateTaskSet(context.Context, *SessionHandler) (*TaskSetHandler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskSet not implemented")
}
func (UnimplementedSessionServer) CloseSession(context.Context, *SessionHandler) (*SessionHandler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedSessionServer) GetInstanceID(context.Context, *SessionHandler) (*InstanceMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceID not implemented")
}
func (UnimplementedSessionServer) mustEmbedUnimplementedSessionServer() {}
func (UnimplementedSessionServer) testEmbeddedByValue()                 {}

// UnsafeSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServer will
// result in compilation errors.
type UnsafeSessionServer interface {
	mustEmbedUnimplementedSessionServer()
}

func RegisterSessionServer(s grpc.ServiceRegistrar, srv SessionServer) {
	// If the following call pancis, it indicates UnimplementedSessionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Session_ServiceDesc, srv)
}

func _Session_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).CreateSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_CreateTaskSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).CreateTaskSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_CreateTaskSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).CreateTaskSet(ctx, req.(*SessionHandler))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_CloseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).CloseSession(ctx, req.(*SessionHandler))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_GetInstanceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetInstanceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Session_GetInstanceID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetInstanceID(ctx, req.(*SessionHandler))
	}
	return interceptor(ctx, in, info, handler)
}

// Session_ServiceDesc is the grpc.ServiceDesc for Session service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Session_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _Session_CreateSession_Handler,
		},
		{
			MethodName: "CreateTaskSet",
			Handler:    _Session_CreateTaskSet_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _Session_CloseSession_Handler,
		},
		{
			MethodName: "GetInstanceID",
			Handler:    _Session_GetInstanceID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_ce_protocol/ceprotocol.proto",
}

const (
	TaskSet_DefineTask_FullMethodName        = "/proto.TaskSet/DefineTask"
	TaskSet_AddMap_FullMethodName            = "/proto.TaskSet/AddMap"
	TaskSet_AddReduce_FullMethodName         = "/proto.TaskSet/AddReduce"
	TaskSet_AddTransform_FullMethodName      = "/proto.TaskSet/AddTransform"
	TaskSet_Execute_FullMethodName           = "/proto.TaskSet/Execute"
	TaskSet_Dismantle_FullMethodName         = "/proto.TaskSet/Dismantle"
	TaskSet_GetTaskSetResults_FullMethodName = "/proto.TaskSet/GetTaskSetResults"
)

// TaskSetClient is the client API for TaskSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskSetClient interface {
	DefineTask(ctx context.Context, in *TaskDefinition, opts ...grpc.CallOption) (*TaskHandler, error)
	AddMap(ctx context.Context, in *MapAdder, opts ...grpc.CallOption) (*TaskAdderResult, error)
	AddReduce(ctx context.Context, in *ReduceAdder, opts ...grpc.CallOption) (*TaskAdderResult, error)
	AddTransform(ctx context.Context, in *TransformAdder, opts ...grpc.CallOption) (*TaskAdderResult, error)
	Execute(ctx context.Context, in *TaskSetHandler, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskSetProgressReport], error)
	Dismantle(ctx context.Context, in *TaskSetHandler, opts ...grpc.CallOption) (*TaskSetHandler, error)
	GetTaskSetResults(ctx context.Context, in *TaskSetHandler, opts ...grpc.CallOption) (*TaskSetResult, error)
}

type taskSetClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskSetClient(cc grpc.ClientConnInterface) TaskSetClient {
	return &taskSetClient{cc}
}

func (c *taskSetClient) DefineTask(ctx context.Context, in *TaskDefinition, opts ...grpc.CallOption) (*TaskHandler, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskHandler)
	err := c.cc.Invoke(ctx, TaskSet_DefineTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSetClient) AddMap(ctx context.Context, in *MapAdder, opts ...grpc.CallOption) (*TaskAdderResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAdderResult)
	err := c.cc.Invoke(ctx, TaskSet_AddMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSetClient) AddReduce(ctx context.Context, in *ReduceAdder, opts ...grpc.CallOption) (*TaskAdderResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAdderResult)
	err := c.cc.Invoke(ctx, TaskSet_AddReduce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSetClient) AddTransform(ctx context.Context, in *TransformAdder, opts ...grpc.CallOption) (*TaskAdderResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAdderResult)
	err := c.cc.Invoke(ctx, TaskSet_AddTransform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSetClient) Execute(ctx context.Context, in *TaskSetHandler, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskSetProgressReport], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskSet_ServiceDesc.Streams[0], TaskSet_Execute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskSetHandler, TaskSetProgressReport]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskSet_ExecuteClient = grpc.ServerStreamingClient[TaskSetProgressReport]

func (c *taskSetClient) Dismantle(ctx context.Context, in *TaskSetHandler, opts ...grpc.CallOption) (*TaskSetHandler, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskSetHandler)
	err := c.cc.Invoke(ctx, TaskSet_Dismantle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSetClient) GetTaskSetResults(ctx context.Context, in *TaskSetHandler, opts ...grpc.CallOption) (*TaskSetResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskSetResult)
	err := c.cc.Invoke(ctx, TaskSet_GetTaskSetResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskSetServer is the server API for TaskSet service.
// All implementations must embed UnimplementedTaskSetServer
// for forward compatibility.
type TaskSetServer interface {
	DefineTask(context.Context, *TaskDefinition) (*TaskHandler, error)
	AddMap(context.Context, *MapAdder) (*TaskAdderResult, error)
	AddReduce(context.Context, *ReduceAdder) (*TaskAdderResult, error)
	AddTransform(context.Context, *TransformAdder) (*TaskAdderResult, error)
	Execute(*TaskSetHandler, grpc.ServerStreamingServer[TaskSetProgressReport]) error
	Dismantle(context.Context, *TaskSetHandler) (*TaskSetHandler, error)
	GetTaskSetResults(context.Context, *TaskSetHandler) (*TaskSetResult, error)
	mustEmbedUnimplementedTaskSetServer()
}

// UnimplementedTaskSetServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskSetServer struct{}

func (UnimplementedTaskSetServer) DefineTask(context.Context, *TaskDefinition) (*TaskHandler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefineTask not implemented")
}
func (UnimplementedTaskSetServer) AddMap(context.Context, *MapAdder) (*TaskAdderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMap not implemented")
}
func (UnimplementedTaskSetServer) AddReduce(context.Context, *ReduceAdder) (*TaskAdderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReduce not implemented")
}
func (UnimplementedTaskSetServer) AddTransform(context.Context, *TransformAdder) (*TaskAdderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransform not implemented")
}
func (UnimplementedTaskSetServer) Execute(*TaskSetHandler, grpc.ServerStreamingServer[TaskSetProgressReport]) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedTaskSetServer) Dismantle(context.Context, *TaskSetHandler) (*TaskSetHandler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dismantle not implemented")
}
func (UnimplementedTaskSetServer) GetTaskSetResults(context.Context, *TaskSetHandler) (*TaskSetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskSetResults not implemented")
}
func (UnimplementedTaskSetServer) mustEmbedUnimplementedTaskSetServer() {}
func (UnimplementedTaskSetServer) testEmbeddedByValue()                 {}

// UnsafeTaskSetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskSetServer will
// result in compilation errors.
type UnsafeTaskSetServer interface {
	mustEmbedUnimplementedTaskSetServer()
}

func RegisterTaskSetServer(s grpc.ServiceRegistrar, srv TaskSetServer) {
	// If the following call pancis, it indicates UnimplementedTaskSetServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskSet_ServiceDesc, srv)
}

func _TaskSet_DefineTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSetServer).DefineTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskSet_DefineTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSetServer).DefineTask(ctx, req.(*TaskDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskSet_AddMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapAdder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSetServer).AddMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskSet_AddMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSetServer).AddMap(ctx, req.(*MapAdder))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskSet_AddReduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceAdder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSetServer).AddReduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskSet_AddReduce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSetServer).AddReduce(ctx, req.(*ReduceAdder))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskSet_AddTransform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformAdder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSetServer).AddTransform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskSet_AddTransform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSetServer).AddTransform(ctx, req.(*TransformAdder))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskSet_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskSetHandler)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskSetServer).Execute(m, &grpc.GenericServerStream[TaskSetHandler, TaskSetProgressReport]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskSet_ExecuteServer = grpc.ServerStreamingServer[TaskSetProgressReport]

func _TaskSet_Dismantle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSetHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSetServer).Dismantle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskSet_Dismantle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSetServer).Dismantle(ctx, req.(*TaskSetHandler))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskSet_GetTaskSetResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSetHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSetServer).GetTaskSetResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskSet_GetTaskSetResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSetServer).GetTaskSetResults(ctx, req.(*TaskSetHandler))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskSet_ServiceDesc is the grpc.ServiceDesc for TaskSet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskSet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskSet",
	HandlerType: (*TaskSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DefineTask",
			Handler:    _TaskSet_DefineTask_Handler,
		},
		{
			MethodName: "AddMap",
			Handler:    _TaskSet_AddMap_Handler,
		},
		{
			MethodName: "AddReduce",
			Handler:    _TaskSet_AddReduce_Handler,
		},
		{
			MethodName: "AddTransform",
			Handler:    _TaskSet_AddTransform_Handler,
		},
		{
			MethodName: "Dismantle",
			Handler:    _TaskSet_Dismantle_Handler,
		},
		{
			MethodName: "GetTaskSetResults",
			Handler:    _TaskSet_GetTaskSetResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _TaskSet_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_ce_protocol/ceprotocol.proto",
}

const (
	BlockProxy_GetBlock_FullMethodName = "/proto.BlockProxy/GetBlock"
	BlockProxy_PutBlock_FullMethodName = "/proto.BlockProxy/PutBlock"
)

// BlockProxyClient is the client API for BlockProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockProxyClient interface {
	GetBlock(ctx context.Context, in *ProxyBlockHandler, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProxyBlockChunk], error)
	PutBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ProxyBlockChunk, ProxyBlockHandler], error)
}

type blockProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockProxyClient(cc grpc.ClientConnInterface) BlockProxyClient {
	return &blockProxyClient{cc}
}

func (c *blockProxyClient) GetBlock(ctx context.Context, in *ProxyBlockHandler, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProxyBlockChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlockProxy_ServiceDesc.Streams[0], BlockProxy_GetBlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProxyBlockHandler, ProxyBlockChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlockProxy_GetBlockClient = grpc.ServerStreamingClient[ProxyBlockChunk]

func (c *blockProxyClient) PutBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ProxyBlockChunk, ProxyBlockHandler], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlockProxy_ServiceDesc.Streams[1], BlockProxy_PutBlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProxyBlockChunk, ProxyBlockHandler]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlockProxy_PutBlockClient = grpc.ClientStreamingClient[ProxyBlockChunk, ProxyBlockHandler]

// BlockProxyServer is the server API for BlockProxy service.
// All implementations must embed UnimplementedBlockProxyServer
// for forward compatibility.
type BlockProxyServer interface {
	GetBlock(*ProxyBlockHandler, grpc.ServerStreamingServer[ProxyBlockChunk]) error
	PutBlock(grpc.ClientStreamingServer[ProxyBlockChunk, ProxyBlockHandler]) error
	mustEmbedUnimplementedBlockProxyServer()
}

// UnimplementedBlockProxyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockProxyServer struct{}

func (UnimplementedBlockProxyServer) GetBlock(*ProxyBlockHandler, grpc.ServerStreamingServer[ProxyBlockChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedBlockProxyServer) PutBlock(grpc.ClientStreamingServer[ProxyBlockChunk, ProxyBlockHandler]) error {
	return status.Errorf(codes.Unimplemented, "method PutBlock not implemented")
}
func (UnimplementedBlockProxyServer) mustEmbedUnimplementedBlockProxyServer() {}
func (UnimplementedBlockProxyServer) testEmbeddedByValue()                    {}

// UnsafeBlockProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockProxyServer will
// result in compilation errors.
type UnsafeBlockProxyServer interface {
	mustEmbedUnimplementedBlockProxyServer()
}

func RegisterBlockProxyServer(s grpc.ServiceRegistrar, srv BlockProxyServer) {
	// If the following call pancis, it indicates UnimplementedBlockProxyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockProxy_ServiceDesc, srv)
}

func _BlockProxy_GetBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProxyBlockHandler)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockProxyServer).GetBlock(m, &grpc.GenericServerStream[ProxyBlockHandler, ProxyBlockChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlockProxy_GetBlockServer = grpc.ServerStreamingServer[ProxyBlockChunk]

func _BlockProxy_PutBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlockProxyServer).PutBlock(&grpc.GenericServerStream[ProxyBlockChunk, ProxyBlockHandler]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlockProxy_PutBlockServer = grpc.ClientStreamingServer[ProxyBlockChunk, ProxyBlockHandler]

// BlockProxy_ServiceDesc is the grpc.ServiceDesc for BlockProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BlockProxy",
	HandlerType: (*BlockProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlock",
			Handler:       _BlockProxy_GetBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutBlock",
			Handler:       _BlockProxy_PutBlock_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_ce_protocol/ceprotocol.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: grpc_resource_alloc_procotol/resourceallocprotocol.proto

package grpc_resource_alloc_procotol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodeRequestingService_RequestNodes_FullMethodName      = "/proto.NodeRequestingService/RequestNodes"
	NodeRequestingService_ReleaseNodes_FullMethodName      = "/proto.NodeRequestingService/ReleaseNodes"
	NodeRequestingService_NodeRequestStatus_FullMethodName = "/proto.NodeRequestingService/NodeRequestStatus"
)

// NodeRequestingServiceClient is the client API for NodeRequestingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeRequestingServiceClient interface {
	RequestNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeAllocationResponse, error)
	ReleaseNodes(ctx context.Context, in *RequestHandler, opts ...grpc.CallOption) (*NodeReleaseResponse, error)
	NodeRequestStatus(ctx context.Context, in *RequestHandler, opts ...grpc.CallOption) (*NodeRequestStatusResponse, error)
}

type nodeRequestingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeRequestingServiceClient(cc grpc.ClientConnInterface) NodeRequestingServiceClient {
	return &nodeRequestingServiceClient{cc}
}

func (c *nodeRequestingServiceClient) RequestNodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeAllocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeAllocationResponse)
	err := c.cc.Invoke(ctx, NodeRequestingService_RequestNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRequestingServiceClient) ReleaseNodes(ctx context.Context, in *RequestHandler, opts ...grpc.CallOption) (*NodeReleaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeReleaseResponse)
	err := c.cc.Invoke(ctx, NodeRequestingService_ReleaseNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRequestingServiceClient) NodeRequestStatus(ctx context.Context, in *RequestHandler, opts ...grpc.CallOption) (*NodeRequestStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeRequestStatusResponse)
	err := c.cc.Invoke(ctx, NodeRequestingService_NodeRequestStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeRequestingServiceServer is the server API for NodeRequestingService service.
// All implementations must embed UnimplementedNodeRequestingServiceServer
// for forward compatibility.
type NodeRequestingServiceServer interface {
	RequestNodes(context.Context, *NodeRequest) (*NodeAllocationResponse, error)
	ReleaseNodes(context.Context, *RequestHandler) (*NodeReleaseResponse, error)
	NodeRequestStatus(context.Context, *RequestHandler) (*NodeRequestStatusResponse, error)
	mustEmbedUnimplementedNodeRequestingServiceServer()
}

// UnimplementedNodeRequestingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeRequestingServiceServer struct{}

func (UnimplementedNodeRequestingServiceServer) RequestNodes(context.Context, *NodeRequest) (*NodeAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNodes not implemented")
}
func (UnimplementedNodeRequestingServiceServer) ReleaseNodes(context.Context, *RequestHandler) (*NodeReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseNodes not implemented")
}
func (UnimplementedNodeRequestingServiceServer) NodeRequestStatus(context.Context, *RequestHandler) (*NodeRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRequestStatus not implemented")
}
func (UnimplementedNodeRequestingServiceServer) mustEmbedUnimplementedNodeRequestingServiceServer() {}
func (UnimplementedNodeRequestingServiceServer) testEmbeddedByValue()                               {}

// UnsafeNodeRequestingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeRequestingServiceServer will
// result in compilation errors.
type UnsafeNodeRequestingServiceServer interface {
	mustEmbedUnimplementedNodeRequestingServiceServer()
}

func RegisterNodeRequestingServiceServer(s grpc.ServiceRegistrar, srv NodeRequestingServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeRequestingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeRequestingService_ServiceDesc, srv)
}

func _NodeRequestingService_RequestNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRequestingServiceServer).RequestNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRequestingService_RequestNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRequestingServiceServer).RequestNodes(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRequestingService_ReleaseNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRequestingServiceServer).ReleaseNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRequestingService_ReleaseNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRequestingServiceServer).ReleaseNodes(ctx, req.(*RequestHandler))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRequestingService_NodeRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHandler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRequestingServiceServer).NodeRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRequestingService_NodeRequestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRequestingServiceServer).NodeRequestStatus(ctx, req.(*RequestHandler))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeRequestingService_ServiceDesc is the grpc.ServiceDesc for NodeRequestingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeRequestingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodeRequestingService",
	HandlerType: (*NodeRequestingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestNodes",
			Handler:    _NodeRequestingService_RequestNodes_Handler,
		},
		{
			MethodName: "ReleaseNodes",
			Handler:    _NodeRequestingService_ReleaseNodes_Handler,
		},
		{
			MethodName: "NodeRequestStatus",
			Handler:    _NodeRequestingService_NodeRequestStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_resource_alloc_procotol/resourceallocprotocol.proto",
}

const (
	NodeStatusUpdateService_UpdateNodeStatus_FullMethodName = "/proto.NodeStatusUpdateService/UpdateNodeStatus"
)

// NodeStatusUpdateServiceClient is the client API for NodeStatusUpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeStatusUpdateServiceClient interface {
	UpdateNodeStatus(ctx context.Context, in *LiveNode, opts ...grpc.CallOption) (*UpdateOk, error)
}

type nodeStatusUpdateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeStatusUpdateServiceClient(cc grpc.ClientConnInterface) NodeStatusUpdateServiceClient {
	return &nodeStatusUpdateServiceClient{cc}
}

func (c *nodeStatusUpdateServiceClient) UpdateNodeStatus(ctx context.Context, in *LiveNode, opts ...grpc.CallOption) (*UpdateOk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOk)
	err := c.cc.Invoke(ctx, NodeStatusUpdateService_UpdateNodeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeStatusUpdateServiceServer is the server API for NodeStatusUpdateService service.
// All implementations must embed UnimplementedNodeStatusUpdateServiceServer
// for forward compatibility.
type NodeStatusUpdateServiceServer interface {
	UpdateNodeStatus(context.Context, *LiveNode) (*UpdateOk, error)
	mustEmbedUnimplementedNodeStatusUpdateServiceServer()
}

// UnimplementedNodeStatusUpdateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeStatusUpdateServiceServer struct{}

func (UnimplementedNodeStatusUpdateServiceServer) UpdateNodeStatus(context.Context, *LiveNode) (*UpdateOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeStatus not implemented")
}
func (UnimplementedNodeStatusUpdateServiceServer) mustEmbedUnimplementedNodeStatusUpdateServiceServer() {
}
func (UnimplementedNodeStatusUpdateServiceServer) testEmbeddedByValue() {}

// UnsafeNodeStatusUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeStatusUpdateServiceServer will
// result in compilation errors.
type UnsafeNodeStatusUpdateServiceServer interface {
	mustEmbedUnimplementedNodeStatusUpdateServiceServer()
}

func RegisterNodeStatusUpdateServiceServer(s grpc.ServiceRegistrar, srv NodeStatusUpdateServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeStatusUpdateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeStatusUpdateService_ServiceDesc, srv)
}

func _NodeStatusUpdateService_UpdateNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeStatusUpdateServiceServer).UpdateNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeStatusUpdateService_UpdateNodeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeStatusUpdateServiceServer).UpdateNodeStatus(ctx, req.(*LiveNode))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeStatusUpdateService_ServiceDesc is the grpc.ServiceDesc for NodeStatusUpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeStatusUpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodeStatusUpdateService",
	HandlerType: (*NodeStatusUpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateNodeStatus",
			Handler:    _NodeStatusUpdateService_UpdateNodeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_resource_alloc_procotol/resourceallocprotocol.proto",
}
